#####Finding the largest connection of a segmented plant image
library(SDMTools)
library(matlab)

flc = function(A,thred){
  #Rotate the matrix for 90 degrees
  #rotate_clockwise = function(x) {
    #t(apply(x, 2, rev))
  #}
  #r = rotate_clockwise(A)
  #Find the components of the image
  ccl.mat = ConnCompLabel(A)
  
  comp_filtered = function(A,thred){
    A[which(A%in%(names(which(table(A) < thred))))] = 0
    return(A)
  }
  
  segmented = comp_filtered(ccl.mat,thred)          
  
  #seg = image(segmented,col=c('grey',rainbow(length(unique(ccl.mat))-1)))
  
  data.return = list(matrix = ccl.mat, filtered_matrix = segmented ) #image= seg)
  return(data.return)
}

plot_comp = function(M){
  arr1 = array(data = M, dim = c(nrow(M), ncol(M), 3))
  arr2 = arr1/max(arr1)
  ## convert it to a raster, interpolate =F to select only sample of pixels of img
  img.r <- as.raster(arr2,interpolate = F)
  s = sort(table(img.r), decreasing = T)
  ss = names(s)
  color = colors()
  m = max(which(s[] > thred))
  for (i in 1:m) {
    if(i == 1){
      img.r[img.r == ss[i]] <-color[1]
    }
    else{
      img.r[img.r == ss[i]] <- color[i*22+1] #pick a suitable color
    }
  }
  for (i in (m+1): length(s)){
    img.r[img.r == ss[i]] <-color[1]
  }
  p = plot(img.r)
  return(p)
}

plot = print(plot_comp(flc(A,thred)$matrix))

#try
#k = find_lc(imageBDEED,10)



#######Exchange the color of the background and the object of interest of a segmented binary image
color_exchange = function(image1){
image = image1
for (i in 1: nrow(image)){
  for (j in 1:ncol(image)){
    if(image[i,j] == 1){
      image[i,j] = 0
    }
    else
      image[i,j] = 1
  }
}
return (image)
}

#image1 = readPNG("~/Desktop/Visible/initial1.png")
#image = color_exchange(image1)
#writePNG(image,"~/Desktop/Visible/initial2.png")



